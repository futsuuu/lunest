mod config;
mod process;

use std::io::Write;

use clap::Parser;
use crossterm::style::Stylize;

/// Lua testing framework
#[derive(Debug, Parser)]
#[command(version, about)]
enum Args {
    /// Run tests
    #[command(visible_alias = "r")]
    Run {
        /// Run tests with the specified profile
        #[arg(long, short, value_delimiter = ',')]
        profile: Vec<String>,
        /// Run tests with the profiles in the specified group
        #[arg(long, short, value_delimiter = ',')]
        group: Vec<String>,
    },

    /// Print wrapper Lua code used for in-source testing
    Wrapper {
        /// Write code into the specified file
        #[arg(long, short, value_name = "FILE")]
        save: Option<std::path::PathBuf>,
    },
}

fn main() -> anyhow::Result<()> {
    let args = Args::parse();
    match args {
        Args::Run { profile, group } => run_cmd(profile, group)?,
        Args::Wrapper { save } => wrapper_cmd(save)?,
    }
    Ok(())
}

#[test]
fn test_lua() -> anyhow::Result<()> {
    std::env::set_current_dir("..")?;
    run_cmd(vec![], vec!["all".into()])
}

fn run_cmd(profiles: Vec<String>, groups: Vec<String>) -> anyhow::Result<()> {
    let root_dir = std::env::current_dir()?;
    let config = config::Config::read(&root_dir)?;
    let profiles = {
        let mut ps = indexmap::IndexMap::new();
        for profile in &profiles {
            let (s, p) = config.profile(Some(profile))?;
            ps.insert(s, p);
        }
        for group in &groups {
            ps.extend(config.group(group)?);
        }
        if ps.is_empty() {
            let (s, p) = config.profile(None)?;
            ps.insert(s, p);
        }
        ps
    };

    let mut has_error = false;
    for (i, (profile_name, profile)) in profiles.iter().enumerate() {
        if i != 0 {
            println!();
        }
        if !run(profile_name, profile, &root_dir)? {
            has_error = true;
        }
    }
    if has_error {
        std::process::exit(1);
    }
    Ok(())
}

fn run(
    profile_name: &str,
    profile: &config::Profile,
    root_dir: &std::path::Path,
) -> anyhow::Result<bool> {
    println!("run with profile '{}'", profile_name.bold());

    let mut process = process::Process::spawn(profile)?;
    process.write(&process::Input::Initialize {
        init_file: profile.init_file()?.map(ToOwned::to_owned),
        root_dir: root_dir.to_path_buf(),
        target_files: profile
            .target_files(root_dir)?
            .into_iter()
            .map(|p| process::TargetFile::new(p, root_dir))
            .collect(),
        term_width: crossterm::terminal::size().map_or(60, |size| size.0),
    })?;

    let mut results = Vec::new();
    println!();

    loop {
        let Some(request) = process.read()? else {
            if process.is_running()? {
                continue;
            } else {
                break;
            }
        };
        match request {
            process::Output::TestFinished(t) => {
                println!("{t}");
                results.push(t);
            }
            process::Output::TestStarted(t) => {
                print!("{t}{}", crossterm::cursor::MoveToColumn(0));
                _ = std::io::stdout().flush();
            }
        }
    }

    let (success, error): (Vec<_>, Vec<_>) = results.iter().partition(|r| r.success());
    println!(
        "\nsuccess: {}, error: {}",
        success.len().to_string().green(),
        error.len().to_string().red(),
    );
    Ok(error.is_empty())
}

fn wrapper_cmd(save: Option<std::path::PathBuf>) -> anyhow::Result<()> {
    let source = concat!(
        "-- Code generated by `lunest wrapper`. DO NOT EDIT.\n",
        "---@diagnostic disable\n",
        include_str!("../../module/lunest/wrapper.lua")
    );
    if let Some(path) = save {
        anyhow::ensure!(!path.exists(), "file already exists");
        std::fs::write(path, source)?;
    } else {
        print!("{}", source);
    }
    Ok(())
}
